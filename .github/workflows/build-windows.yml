name: Build Windows Executable

# Запускаем при пуше в любую ветку
on: [push]

jobs:
  build-windows:
    runs-on: windows-latest
    env:
      EXPECTED_DESCRIPTION: "Rutoken ECP PKCS #11 library"
      PKCS11_VERSION: "3rdparty" # bump to refresh cache when library updates

    steps:
      # 1. Забираем ваш код
      - uses: actions/checkout@v4

      # 2. Устанавливаем Python (можете указать вашу версию, например 3.12)
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          cache: 'pip'
          cache-dependency-path: 'requirements-build.txt'

      - name: Install build dependencies
        run: pip install -r requirements-build.txt

      - name: Cache pkcs11 dll
        id: cache-pkcs11
        uses: actions/cache@v4
        with:
          path: wtpkcs11ecp.dll
          key: pkcs11-${{ runner.os }}-${{ env.PKCS11_VERSION }}

      - name: Download pkcs11 dll
        if: steps.cache-pkcs11.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          python scripts/download_wtpkcs11ecp.py `
            --pattern windows `
            --pattern x86_64 `
            --library-pattern wtpkcs11ecp.dll

      # 3. Собираем один exe-файл
      - name: Build exe
        run: pyinstaller --onefile main.py
        
      - name: Copy DLL
        shell: pwsh
        run: Copy-Item wtpkcs11ecp.dll dist\

      - name: Test application
        shell: pwsh
        run: |
          # 1) Запускаем exe и собираем stdout+stderr
          $lines = & .\dist\main.exe --library-info 2>&1
          $text  = $lines -join "`n"

          # 2) Показываем весь вывод, чтобы было видно, что вернулось
          Write-Host "App output:`n$text"

          # 3) Проверяем, что в нём есть Library Description с «ECP PKCS #11 library»
          if ($text -notmatch 'Library Description:.*ECP PKCS #11 library') {
            Write-Error "Не удалось найти ожидаемую строку 'Library Description: ... ECP PKCS #11 library' в выводе"
            exit 1
          }
          
      # 5. Загружаем получившийся exe как артефакт
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-package
          path: dist/**
